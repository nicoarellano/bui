import { LitElement } from "lit";
export declare class Label extends LitElement {
    static styles: import("lit").CSSResult;
    /**
     * Represents the text label of the component. This is the primary content displayed by the component.
     * When the `label` property changes, the displayed text updates to reflect the new value. If the label is hidden (controlled by `labelHidden`), changing this property will not affect the visibility of the label.
     * @type {String}
     * @default undefined
     * @example <bim-label label="Example Label"></bim-label>
     * @example
     * const labelComponent = document.createElement('bim-label');
     * labelComponent.label = 'Example Label';
     * document.body.appendChild(labelComponent);
     */
    label?: string;
    /**
     * Specifies the image URL for the component. When set, an `<img>` element is rendered within the component.
     * Changing this property updates the source of the image. If the property is not set or removed, the image will not be displayed.
     * @type {String}
     * @default undefined
     * @example <bim-label img="path/to/image.png"></bim-label>
     * @example
     * const labelComponent = document.createElement('bim-label');
     * labelComponent.img = 'path/to/image.png';
     * document.body.appendChild(labelComponent);
     */
    img?: string;
    /**
     * Controls the visibility of the label text. When `true`, the label text is not rendered to the user.
     * Changing this property to `true` hides the label text if it was previously visible. Setting it to `false` will show the label text if it is defined.
     * @default false
     * @example <bim-label label-hidden></bim-label>
     * @example
     * const labelComponent = document.createElement('bim-label');
     * labelComponent.labelHidden = true;
     * document.body.appendChild(labelComponent);
     */
    labelHidden: boolean;
    /**
     * Specifies the icon to be used in the component. This property is intended for displaying an icon alongside the label or image.
     * When the `icon` property changes, the displayed icon updates accordingly. If the icon is hidden (controlled by `iconHidden`), changing this property will not affect the visibility of the icon.
     * Note: The actual rendering of the icon is managed by a nested `<bim-icon>` component in the shadow DOM.
     * @type {String}
     * @default undefined
     * @example <bim-label icon="example-icon"></bim-label>
     * @example
     * const labelComponent = document.createElement('bim-label');
     * labelComponent.icon = 'example-icon';
     * document.body.appendChild(labelComponent);
     */
    icon?: string;
    /**
     * Controls the visibility of the icon. When `true`, the icon is not rendered to the user.
     * Changing this property to `true` hides the icon if it was previously visible. Setting it to `false` will show the icon if it is defined.
     * Note: This does not affect the visibility of the label or image, only the icon.
     * @default false
     * @example <bim-label icon-hidden></bim-label>
     * @example
     * const labelComponent = document.createElement('bim-label');
     * labelComponent.iconHidden = true;
     * document.body.appendChild(labelComponent);
     */
    iconHidden: boolean;
    /**
     * Determines the orientation of the component. When `true`, the component's contents (label, image, and icon) are stacked vertically.
     * Changing this property affects the layout of the component, switching between a horizontal and vertical arrangement of its contents.
     * @default false
     * @example <bim-label vertical></bim-label>
     * @example
     * const labelComponent = document.createElement('bim-label');
     * labelComponent.vertical = true;
     * document.body.appendChild(labelComponent);
     */
    vertical: boolean;
    get value(): string | number | boolean | undefined;
    protected render(): import("lit-html").TemplateResult<1>;
}
